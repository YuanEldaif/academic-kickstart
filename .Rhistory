install.packages("tidytext")
library(tidytext)
tidy_book <- book %>%
unnest_tokens(word, text)
tidy_book
tidy_book <- tidy_book %>%
anti_join(get_stopwords())
#We can also use count to find the most common words in all the book as a whole
tidy_book %>%
count(word, sort = TRUE)
library(tidytext)
tidy_book <- book %>%
unnest_tokens(word, text)
tidy_book
tidy_book <- tidy_book %>%
anti_join(get_stopwords())
#We can also use count to find the most common words in all the book as a whole
tidy_book %>%
count(word, sort = TRUE)
library(tidyr)
get_sentiments("bing")
sentiment <- tidy_book %>%
inner_join(get_sentiments("bing"), by = "word") %>%
count(title, index = line %/% 80, sentiment) %>%
spread(sentiment, n, fill = 0) %>%
mutate(sentiment = positive - negative)
sentiment
library(ggplot2)
ggplot(sentiment, aes(index, sentiment, fill = title)) +
geom_bar(stat = "identity", show.legend = FALSE) +
facet_wrap(~title, ncol = 2, scales = "free_x")
bing_word_counts <- tidy_book %>%
inner_join(get_sentiments("bing")) %>%
count(word, sentiment, sort = TRUE)
bing_word_counts
bing_word_counts %>%
filter(n > 100) %>%
mutate(n = ifelse(sentiment == "negative", -n, n)) %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(word, n, fill = sentiment)) +
geom_col() +
coord_flip() +
labs(y = "Contribution to sentiment")
custom_stop_words <- bind_rows(get_stopwords(),
tibble(word = "miss",
lexicon = "custom"))
tidy_book2 <- tidy_book %>%
anti_join(custom_stop_words) %>%
count(word, sort = TRUE)
library(wordcloud)
tidy_book %>%
count(word) %>%
with(wordcloud(word, n, max.words = 100))
library(reshape2)
tidy_book %>%
inner_join(get_sentiments("bing")) %>%
count(word, sentiment, sort = TRUE) %>%
acast(word ~ sentiment, value.var = "n", fill = 0) %>%
comparison.cloud(colors = c("#F8766D", "#00BFC4"),
max.words = 100)
blogdown:::serve_site()
library(gutenbergr)
library(dplyr)
book <-  gutenberg_download(c(98, 1400), meta_fields = "title") %>%
group_by(title) %>%
mutate(line = row_number()) %>%
ungroup()
book
library(tidytext)
tidy_book <- book %>%
unnest_tokens(word, text)
tidy_book
tidy_book <- tidy_book %>%
anti_join(get_stopwords())
#We can also use count to find the most common words in all the book as a whole
tidy_book %>%
count(word, sort = TRUE)
library(tidyr)
get_sentiments("bing")
sentiment <- tidy_book %>%
inner_join(get_sentiments("bing"), by = "word") %>%
count(title, index = line %/% 80, sentiment) %>%
spread(sentiment, n, fill = 0) %>%
mutate(sentiment = positive - negative)
sentiment
library(ggplot2)
ggplot(sentiment, aes(index, sentiment, fill = title)) +
geom_bar(stat = "identity", show.legend = FALSE) +
facet_wrap(~title, ncol = 2, scales = "free_x")
bing_word_counts <- tidy_book %>%
inner_join(get_sentiments("bing")) %>%
count(word, sentiment, sort = TRUE)
bing_word_counts
bing_word_counts %>%
filter(n > 100) %>%
mutate(n = ifelse(sentiment == "negative", -n, n)) %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(word, n, fill = sentiment)) +
geom_col() +
coord_flip() +
labs(y = "Contribution to sentiment")
custom_stop_words <- bind_rows(get_stopwords(),
tibble(word = "miss",
lexicon = "custom"))
tidy_book2 <- tidy_book %>%
anti_join(custom_stop_words) %>%
count(word, sort = TRUE)
library(wordcloud)
tidy_book %>%
count(word) %>%
with(wordcloud(word, n, max.words = 100))
library(reshape2)
tidy_book %>%
inner_join(get_sentiments("bing")) %>%
count(word, sentiment, sort = TRUE) %>%
acast(word ~ sentiment, value.var = "n", fill = 0) %>%
comparison.cloud(colors = c("#F8766D", "#00BFC4"),
max.words = 100)
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::serve_site()
blogdown:::serve_site()
install.packages("DiagrammeR")
DiagrammeR::grViz("digraph {
graph [layout = dot, rankdir = LR]
# define the global styles of the nodes. We can override these in box if we wish
node [shape = rectangle, style = filled, fillcolor = Linen]
First [label =  '1. \n Create \n Github Repository']
Second [label = '2. \n Create R blogdown \n in R Studio']
Third [label= '3. \n Deploy the web \n by Netlify']
# edge definitions with the node IDs
First -> Second -> Third
}", height=150)
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
library(DiagrammeR)
#library(widgetframe)
#library(htmlwidgets)
library(htmltools)
Diag <- DiagrammeR::grViz("digraph {
graph [layout = dot, rankdir = LR]
# define the global styles of the nodes. We can override these in box if we wish
node [shape = rectangle, style = filled, fillcolor = Linen]
First [label =  '1. \n Create \n Github Repository']
Second [label = '2. \n Create R blogdown \n in R Studio']
Third [label= '3. \n Deploy the web \n by Netlify']
# edge definitions with the node IDs
First -> Second -> Third
}")
#htmlwidgets::saveWidget(Diag, file = "Diag.html", selfcontained = TRUE)
#frameWidget(Diag, height = 150, width = '100%')
DiagrammeR::export_Diag(Diag, "Diag.js")
install.packages("DiagrammeRsvg")
install.packages("rsvg")
library(DiagrammeR)
#library(widgetframe)
#library(htmlwidgets)
library(DiagrammeRsvg)
library(rsvg)
Diag <- DiagrammeR::grViz("digraph {
graph [layout = dot, rankdir = LR]
# define the global styles of the nodes. We can override these in box if we wish
node [shape = rectangle, style = filled, fillcolor = Linen]
First [label =  '1. \n Create \n Github Repository']
Second [label = '2. \n Create R blogdown \n in R Studio']
Third [label= '3. \n Deploy the web \n by Netlify']
# edge definitions with the node IDs
First -> Second -> Third
}")
#htmlwidgets::saveWidget(Diag, file = "Diag.html", selfcontained = TRUE)
#frameWidget(Diag, height = 150, width = '100%')
export_graph(Diag,
file_name = "Diag.png",
file_type = "png")
library(DiagrammeR)
#library(widgetframe)
#library(htmlwidgets)
library(DiagrammeRsvg)
library(rsvg)
Diag <- DiagrammeR::grViz("digraph {
graph [layout = dot, rankdir = LR]
# define the global styles of the nodes. We can override these in box if we wish
node [shape = rectangle, style = filled, fillcolor = Linen]
First [label =  '1. \n Create \n Github Repository']
Second [label = '2. \n Create R blogdown \n in R Studio']
Third [label= '3. \n Deploy the web \n by Netlify']
# edge definitions with the node IDs
First -> Second -> Third
}")
#htmlwidgets::saveWidget(Diag, file = "Diag.html", selfcontained = TRUE)
#frameWidget(Diag, height = 150, width = '100%')
grViz(Diag) %>%
export_svg %>% charToRaw %>% rsvg_png("Diag.png")
library(DiagrammeR)
#library(widgetframe)
#library(htmlwidgets)
library(DiagrammeRsvg)
library(rsvg)
Diag <- DiagrammeR::grViz("digraph {
graph [layout = dot, rankdir = LR]
# define the global styles of the nodes. We can override these in box if we wish
node [shape = rectangle, style = filled, fillcolor = Linen]
First [label =  '1. \n Create \n Github Repository']
Second [label = '2. \n Create R blogdown \n in R Studio']
Third [label= '3. \n Deploy the web \n by Netlify']
# edge definitions with the node IDs
First -> Second -> Third
}")
#htmlwidgets::saveWidget(Diag, file = "Diag.html", selfcontained = TRUE)
#frameWidget(Diag, height = 150, width = '100%')
Diag %>%
export_graph(
file_name = "Diag.png",
file_type = "PNG")
library(DiagrammeR)
#library(widgetframe)
#library(htmlwidgets)
library(DiagrammeRsvg)
library(rsvg)
Diag <- DiagrammeR::grViz("digraph {
graph [layout = dot, rankdir = LR]
# define the global styles of the nodes. We can override these in box if we wish
node [shape = rectangle, style = filled, fillcolor = Linen]
First [label =  '1. \n Create \n Github Repository']
Second [label = '2. \n Create R blogdown \n in R Studio']
Third [label= '3. \n Deploy the web \n by Netlify']
# edge definitions with the node IDs
First -> Second -> Third
}")
#htmlwidgets::saveWidget(Diag, file = "Diag.html", selfcontained = TRUE)
#frameWidget(Diag, height = 150, width = '100%')
Diag
library(DiagrammeR)
#library(widgetframe)
#library(htmlwidgets)
library(DiagrammeRsvg)
library(rsvg)
Diag <- DiagrammeR::grViz("digraph {
graph [layout = dot, rankdir = LR]
# define the global styles of the nodes. We can override these in box if we wish
node [shape = rectangle, style = filled, fillcolor = Linen]
First [label =  '1. \n Create \n Github Repository']
Second [label = '2. \n Create R blogdown \n in R Studio']
Third [label= '3. \n Deploy the web \n by Netlify']
# edge definitions with the node IDs
First -> Second -> Third
}", height=150)
#htmlwidgets::saveWidget(Diag, file = "Diag.html", selfcontained = TRUE)
#frameWidget(Diag, height = 150, width = '100%')
Diag
library(DiagrammeR)
#library(widgetframe)
#library(htmlwidgets)
library(DiagrammeRsvg)
library(rsvg)
Diag <- DiagrammeR::grViz("digraph {
graph [layout = dot, rankdir = LR]
# define the global styles of the nodes. We can override these in box if we wish
node [shape = rectangle, style = filled, fillcolor = Linen]
First [label =  '1. \n Create \n Github Repository']
Second [label = '2. \n Create R blogdown \n in R Studio']
Third [label= '3. \n Deploy the web \n by Netlify']
# edge definitions with the node IDs
First -> Second -> Third
}", height=200)
#htmlwidgets::saveWidget(Diag, file = "Diag.html", selfcontained = TRUE)
#frameWidget(Diag, height = 150, width = '100%')
grViz(Diag) %>%
export_svg %>% charToRaw %>% rsvg_png("Diag.png")
library(DiagrammeR)
#library(widgetframe)
#library(htmlwidgets)
library(DiagrammeRsvg)
library(rsvg)
Diag <- DiagrammeR::grViz("digraph {
graph [layout = dot, rankdir = LR]
# define the global styles of the nodes. We can override these in box if we wish
node [shape = rectangle, style = filled, fillcolor = Linen]
First [label =  '1. \n Create \n Github Repository']
Second [label = '2. \n Create R blogdown \n in R Studio']
Third [label= '3. \n Deploy the web \n by Netlify']
# edge definitions with the node IDs
First -> Second -> Third
}", height=200)
#htmlwidgets::saveWidget(Diag, file = "Diag.html", selfcontained = TRUE)
#frameWidget(Diag, height = 150, width = '100%')
export_graph(Diag,
file_name = "pic.png",
file_type = "png")
library(DiagrammeR)
#library(widgetframe)
#library(htmlwidgets)
library(DiagrammeRsvg)
library(rsvg)
Diag <- DiagrammeR::grViz("digraph {
graph [layout = dot, rankdir = LR]
# define the global styles of the nodes. We can override these in box if we wish
node [shape = rectangle, style = filled, fillcolor = Linen]
First [label =  '1. \n Create \n Github Repository']
Second [label = '2. \n Create R blogdown \n in R Studio']
Third [label= '3. \n Deploy the web \n by Netlify']
# edge definitions with the node IDs
First -> Second -> Third
}", height=200)
#htmlwidgets::saveWidget(Diag, file = "Diag.html", selfcontained = TRUE)
#frameWidget(Diag, height = 150, width = '100%')
capture.output(rsvg_png(charToRaw(export_svg(Diag)),'Diag.png'))
library(DiagrammeR)
#library(widgetframe)
#library(htmlwidgets)
library(DiagrammeRsvg)
library(rsvg)
Diag <- DiagrammeR::grViz("digraph {
graph [layout = dot, rankdir = LR]
# define the global styles of the nodes. We can override these in box if we wish
node [shape = rectangle, style = filled, fillcolor = Linen]
First [label =  '1. \n Create \n Github Repository']
Second [label = '2. \n Create R blogdown \n in R Studio']
Third [label= '3. \n Deploy the web \n by Netlify']
# edge definitions with the node IDs
First -> Second -> Third
}", height=200)
#htmlwidgets::saveWidget(Diag, file = "Diag.html", selfcontained = TRUE)
#frameWidget(Diag, height = 150, width = '100%')
capture.output(rsvg_png(charToRaw(export_svg(Diag)),'Diag.png'))
cat('! diagram](Diag.png){#fig:Diag}\n\n')
blogdown:::serve_site()
library(DiagrammeR)
library(DiagrammeRsvg)
library(rsvg)
Diag <- DiagrammeR::grViz("digraph {
graph [layout = dot, rankdir = LR]
# define the global styles of the nodes. We can override these in box if we wish
node [shape = rectangle, style = filled, fillcolor = Linen]
First [label =  '1. \n Create \n Github Repository']
Second [label = '2. \n Create R blogdown \n in R Studio']
Third [label= '3. \n Deploy the web \n by Netlify']
# edge definitions with the node IDs
First -> Second -> Third
}", height=200)
frameWidget(Diag, height = 200, width = '100%')
library(DiagrammeR)
library(DiagrammeRsvg)
library(rsvg)
library(htmlwidgets)
Diag <- DiagrammeR::grViz("digraph {
graph [layout = dot, rankdir = LR]
# define the global styles of the nodes. We can override these in box if we wish
node [shape = rectangle, style = filled, fillcolor = Linen]
First [label =  '1. \n Create \n Github Repository']
Second [label = '2. \n Create R blogdown \n in R Studio']
Third [label= '3. \n Deploy the web \n by Netlify']
# edge definitions with the node IDs
First -> Second -> Third
}", height=200)
frameWidget(Diag, height = 200, width = '100%')
library(DiagrammeR)
library(DiagrammeRsvg)
library(rsvg)
#library(htmlwidgets)
Diag <- DiagrammeR::grViz("digraph {
graph [layout = dot, rankdir = LR]
# define the global styles of the nodes. We can override these in box if we wish
node [shape = rectangle, style = filled, fillcolor = Linen]
First [label =  '1. \n Create \n Github Repository']
Second [label = '2. \n Create R blogdown \n in R Studio']
Third [label= '3. \n Deploy the web \n by Netlify']
# edge definitions with the node IDs
First -> Second -> Third
}", height=200)
Diag
#frameWidget(Diag, height = 200, width = '100%')
library(DiagrammeR)
library(DiagrammeRsvg)
library(rsvg)
#library(htmlwidgets)
Diag <- DiagrammeR::grViz("digraph {
graph [layout = dot, rankdir = LR]
# define the global styles of the nodes. We can override these in box if we wish
node [shape = rectangle, style = filled, fillcolor = Linen]
First [label =  '1. \n Create \n Github Repository']
Second [label = '2. \n Create R blogdown \n in R Studio']
Third [label= '3. \n Deploy the web \n by Netlify']
# edge definitions with the node IDs
First -> Second -> Third
}", height=200)
export_graph(Diag,
file_name = "Diag.png",
file_type = "png")
library(DiagrammeR)
library(DiagrammeRsvg)
library(rsvg)
#library(htmlwidgets)
Diag <- DiagrammeR::grViz("digraph {
graph [layout = dot, rankdir = LR]
# define the global styles of the nodes. We can override these in box if we wish
node [shape = rectangle, style = filled, fillcolor = Linen]
First [label =  '1. \n Create \n Github Repository']
Second [label = '2. \n Create R blogdown \n in R Studio']
Third [label= '3. \n Deploy the web \n by Netlify']
# edge definitions with the node IDs
First -> Second -> Third
}", height=200)
export_svg(grViz(Diag$dot_code)) %>%
charToRaw %>% rsvg %>% png::writePNG('Diag.png')
library(DiagrammeR)
library(DiagrammeRsvg)
library(rsvg)
#library(htmlwidgets)
Diag <- DiagrammeR::grViz("digraph {
graph [layout = dot, rankdir = LR]
# define the global styles of the nodes. We can override these in box if we wish
node [shape = rectangle, style = filled, fillcolor = Linen]
First [label =  '1. \n Create \n Github Repository']
Second [label = '2. \n Create R blogdown \n in R Studio']
Third [label= '3. \n Deploy the web \n by Netlify']
# edge definitions with the node IDs
First -> Second -> Third
}", height=200)
export_svg(grViz(Diag)) %>%
charToRaw %>% rsvg %>% png::writePNG('Diag.png')
library(DiagrammeR)
library(DiagrammeRsvg)
library(rsvg)
#library(htmlwidgets)
library(htmltools)
Diag <- DiagrammeR::grViz("digraph {
graph [layout = dot, rankdir = LR]
# define the global styles of the nodes. We can override these in box if we wish
node [shape = rectangle, style = filled, fillcolor = Linen]
First [label =  '1. \n Create \n Github Repository']
Second [label = '2. \n Create R blogdown \n in R Studio']
Third [label= '3. \n Deploy the web \n by Netlify']
# edge definitions with the node IDs
First -> Second -> Third
}", height=200)
export_svg(grViz(Diag))
library(DiagrammeR)
library(DiagrammeRsvg)
library(rsvg)
#library(htmlwidgets)
library(htmltools)
Diag <- DiagrammeR::grViz("digraph {
graph [layout = dot, rankdir = LR]
# define the global styles of the nodes. We can override these in box if we wish
node [shape = rectangle, style = filled, fillcolor = Linen]
First [label =  '1. \n Create \n Github Repository']
Second [label = '2. \n Create R blogdown \n in R Studio']
Third [label= '3. \n Deploy the web \n by Netlify']
# edge definitions with the node IDs
First -> Second -> Third
}", height=200)
html_print(HTML(svg))
library(DiagrammeR)
library(DiagrammeRsvg)
library(rsvg)
#library(htmlwidgets)
library(htmltools)
Diag <- DiagrammeR::grViz("digraph {
graph [layout = dot, rankdir = LR]
# define the global styles of the nodes. We can override these in box if we wish
node [shape = rectangle, style = filled, fillcolor = Linen]
First [label =  '1. \n Create \n Github Repository']
Second [label = '2. \n Create R blogdown \n in R Studio']
Third [label= '3. \n Deploy the web \n by Netlify']
# edge definitions with the node IDs
First -> Second -> Third
}", height=200)
tmp<-capture.output(rsvg_png(charToRaw(export_svg(Diag)),'Diag.png'))
cat('![flowchart](Diag.png){#fig:flow}\n\n')
#frameWidget(Diag, height = 200, width = '100%')
knitr::opts_chunk$set(collapse = TRUE)
summary(cars)
fit <- lm(dist ~ speed, data = cars)
fit
par(mar = c(0, 1, 0, 1))
pie(
c(280, 60, 20),
c('Sky', 'Sunny side of pyramid', 'Shady side of pyramid'),
col = c('#0292D8', '#F7EA39', '#C4B632'),
init.angle = -50, border = NA
)
DiagrammeR::grViz("digraph {
graph [layout = dot, rankdir = LR]
# define the global styles of the nodes. We can override these in box if we wish
node [shape = rectangle, style = filled, fillcolor = Linen]
First [label =  '1. \n Create \n Github Repository']
Second [label = '2. \n Create R blogdown \n in R Studio']
Third [label= '3. \n Deploy the web \n by Netlify']
# edge definitions with the node IDs
First -> Second -> Third
}", height=150)
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::new_post_addin()
knitr::opts_chunk$set(collapse = TRUE)
DiagrammeR::grViz("digraph {
graph [layout = dot, rankdir = LR]
# define the global styles of the nodes. We can override these in box if we wish
node [shape = rectangle, style = filled, fillcolor = Linen]
First [label =  '1. \n Create \n Github Repository']
Second [label = '2. \n Create R blogdown \n in R Studio']
Third [label= '3. \n Deploy the web \n by Netlify']
# edge definitions with the node IDs
First -> Second -> Third
}", height=150)
