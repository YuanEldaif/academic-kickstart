blogdown:::serve_site()
hugo new --kind publication publication/journal-article
blogdown:::new_post_addin()
blogdown:::new_post_addin()
hugo server --watch
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
library(gutenbergr)
library(dplyr)
book <-  gutenberg_download(c(98, 1400), meta_fields = "title") %>%
group_by(title) %>%
mutate(line = row_number()) %>%
ungroup()
book
library(tidytext)
install.packages("tidytext")
library(tidytext)
tidy_book <- book %>%
unnest_tokens(word, text)
tidy_book
tidy_book <- tidy_book %>%
anti_join(get_stopwords())
#We can also use count to find the most common words in all the book as a whole
tidy_book %>%
count(word, sort = TRUE)
library(tidytext)
tidy_book <- book %>%
unnest_tokens(word, text)
tidy_book
tidy_book <- tidy_book %>%
anti_join(get_stopwords())
#We can also use count to find the most common words in all the book as a whole
tidy_book %>%
count(word, sort = TRUE)
library(tidyr)
get_sentiments("bing")
sentiment <- tidy_book %>%
inner_join(get_sentiments("bing"), by = "word") %>%
count(title, index = line %/% 80, sentiment) %>%
spread(sentiment, n, fill = 0) %>%
mutate(sentiment = positive - negative)
sentiment
library(ggplot2)
ggplot(sentiment, aes(index, sentiment, fill = title)) +
geom_bar(stat = "identity", show.legend = FALSE) +
facet_wrap(~title, ncol = 2, scales = "free_x")
bing_word_counts <- tidy_book %>%
inner_join(get_sentiments("bing")) %>%
count(word, sentiment, sort = TRUE)
bing_word_counts
bing_word_counts %>%
filter(n > 100) %>%
mutate(n = ifelse(sentiment == "negative", -n, n)) %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(word, n, fill = sentiment)) +
geom_col() +
coord_flip() +
labs(y = "Contribution to sentiment")
custom_stop_words <- bind_rows(get_stopwords(),
tibble(word = "miss",
lexicon = "custom"))
tidy_book2 <- tidy_book %>%
anti_join(custom_stop_words) %>%
count(word, sort = TRUE)
library(wordcloud)
tidy_book %>%
count(word) %>%
with(wordcloud(word, n, max.words = 100))
library(reshape2)
tidy_book %>%
inner_join(get_sentiments("bing")) %>%
count(word, sentiment, sort = TRUE) %>%
acast(word ~ sentiment, value.var = "n", fill = 0) %>%
comparison.cloud(colors = c("#F8766D", "#00BFC4"),
max.words = 100)
blogdown:::serve_site()
library(gutenbergr)
library(dplyr)
book <-  gutenberg_download(c(98, 1400), meta_fields = "title") %>%
group_by(title) %>%
mutate(line = row_number()) %>%
ungroup()
book
library(tidytext)
tidy_book <- book %>%
unnest_tokens(word, text)
tidy_book
tidy_book <- tidy_book %>%
anti_join(get_stopwords())
#We can also use count to find the most common words in all the book as a whole
tidy_book %>%
count(word, sort = TRUE)
library(tidyr)
get_sentiments("bing")
sentiment <- tidy_book %>%
inner_join(get_sentiments("bing"), by = "word") %>%
count(title, index = line %/% 80, sentiment) %>%
spread(sentiment, n, fill = 0) %>%
mutate(sentiment = positive - negative)
sentiment
library(ggplot2)
ggplot(sentiment, aes(index, sentiment, fill = title)) +
geom_bar(stat = "identity", show.legend = FALSE) +
facet_wrap(~title, ncol = 2, scales = "free_x")
bing_word_counts <- tidy_book %>%
inner_join(get_sentiments("bing")) %>%
count(word, sentiment, sort = TRUE)
bing_word_counts
bing_word_counts %>%
filter(n > 100) %>%
mutate(n = ifelse(sentiment == "negative", -n, n)) %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(word, n, fill = sentiment)) +
geom_col() +
coord_flip() +
labs(y = "Contribution to sentiment")
custom_stop_words <- bind_rows(get_stopwords(),
tibble(word = "miss",
lexicon = "custom"))
tidy_book2 <- tidy_book %>%
anti_join(custom_stop_words) %>%
count(word, sort = TRUE)
library(wordcloud)
tidy_book %>%
count(word) %>%
with(wordcloud(word, n, max.words = 100))
library(reshape2)
tidy_book %>%
inner_join(get_sentiments("bing")) %>%
count(word, sentiment, sort = TRUE) %>%
acast(word ~ sentiment, value.var = "n", fill = 0) %>%
comparison.cloud(colors = c("#F8766D", "#00BFC4"),
max.words = 100)
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::serve_site()
blogdown:::serve_site()
install.packages("DiagrammeR")
DiagrammeR::grViz("digraph {
graph [layout = dot, rankdir = LR]
# define the global styles of the nodes. We can override these in box if we wish
node [shape = rectangle, style = filled, fillcolor = Linen]
First [label =  '1. \n Create \n Github Repository']
Second [label = '2. \n Create R blogdown \n in R Studio']
Third [label= '3. \n Deploy the web \n by Netlify']
# edge definitions with the node IDs
First -> Second -> Third
}", height=150)
blogdown:::serve_site()
